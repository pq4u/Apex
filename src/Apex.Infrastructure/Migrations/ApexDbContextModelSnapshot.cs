// <auto-generated />
using System;
using Apex.Infrastructure.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Apex.Infrastructure.Migrations
{
    [DbContext(typeof(ApexDbContext))]
    partial class ApexDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("domain")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Apex.Domain.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BroadcastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int>("DriverNumber")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HeadshotUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NameAcronym")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.HasKey("Id");

                    b.HasIndex("DriverNumber");

                    b.ToTable("drivers", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.IngestionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("RecordsCount")
                        .HasColumnType("bigint");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("ingestion_statuses", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Lap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationSector1Ms")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationSector2Ms")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationSector3Ms")
                        .HasColumnType("integer");

                    b.Property<int?>("FinishLineSpeed")
                        .HasColumnType("integer");

                    b.Property<int?>("I1Speed")
                        .HasColumnType("integer");

                    b.Property<int?>("I2Speed")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPitOutLap")
                        .HasColumnType("boolean");

                    b.Property<int?>("LapDurationMs")
                        .HasColumnType("integer");

                    b.Property<int>("LapNumber")
                        .HasColumnType("integer");

                    b.Property<string>("SegmentsJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<int?>("StSpeed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("SessionId", "DriverId");

                    b.HasIndex("SessionId", "DriverId", "LapNumber")
                        .IsUnique();

                    b.ToTable("laps", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CircuitKey")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<string>("CircuitShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("CountryKey")
                        .HasMaxLength(3)
                        .HasColumnType("integer");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Key")
                        .HasMaxLength(10)
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("meetings", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.PitStop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("LapNumber")
                        .HasColumnType("integer");

                    b.Property<decimal>("PitDuration")
                        .HasPrecision(5, 3)
                        .HasColumnType("numeric(5,3)");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("SessionId");

                    b.ToTable("pit_stops", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.RaceControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int?>("LapNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("SessionId");

                    b.ToTable("race_controls", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GmtOffset")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Key")
                        .HasMaxLength(20)
                        .HasColumnType("integer");

                    b.Property<int>("MeetingId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("sessions", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.SessionDriver", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("SessionId", "DriverId");

                    b.HasIndex("DriverId");

                    b.HasIndex("TeamId");

                    b.ToTable("session_drivers", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Stint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Compound")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<int>("LapEnd")
                        .HasColumnType("integer");

                    b.Property<int>("LapStart")
                        .HasColumnType("integer");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<int>("StintNumber")
                        .HasColumnType("integer");

                    b.Property<int?>("TyreAgeAtStart")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("SessionId");

                    b.ToTable("stints", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TeamColour")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.ToTable("teams", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.IngestionStatus", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("IngestionStatuses")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Lap", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Driver", "Driver")
                        .WithMany("Laps")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("Laps")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Apex.Domain.Entities.PitStop", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Driver", "Driver")
                        .WithMany("PitStops")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("PitStops")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Apex.Domain.Entities.RaceControl", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("RaceControls")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Session", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Meeting", "Meeting")
                        .WithMany("Sessions")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Apex.Domain.Entities.SessionDriver", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Driver", "Driver")
                        .WithMany("SessionDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("SessionDrivers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apex.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Session");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Stint", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Driver", "Driver")
                        .WithMany("Stints")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("Stints")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Driver", b =>
                {
                    b.Navigation("Laps");

                    b.Navigation("PitStops");

                    b.Navigation("SessionDrivers");

                    b.Navigation("Stints");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Meeting", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Session", b =>
                {
                    b.Navigation("IngestionStatuses");

                    b.Navigation("Laps");

                    b.Navigation("PitStops");

                    b.Navigation("RaceControls");

                    b.Navigation("SessionDrivers");

                    b.Navigation("Stints");
                });
#pragma warning restore 612, 618
        }
    }
}
