// <auto-generated />
using System;
using Apex.Infrastructure.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Apex.Infrastructure.Migrations
{
    [DbContext(typeof(ApexDbContext))]
    [Migration("20251002195717_ConvertObjectNamesToSnakeCase")]
    partial class ConvertObjectNamesToSnakeCase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("domain")
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Apex.Domain.Entities.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BroadcastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("broadcast_name");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("country_code");

                    b.Property<int>("DriverNumber")
                        .HasColumnType("integer")
                        .HasColumnName("driver_number");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("HeadshotUrl")
                        .HasColumnType("text")
                        .HasColumnName("headshot_url");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("NameAcronym")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("name_acronym");

                    b.HasKey("Id")
                        .HasName("pk_drivers");

                    b.HasIndex("DriverNumber")
                        .HasDatabaseName("ix_drivers_driver_number");

                    b.ToTable("drivers", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.IngestionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("data_type");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated");

                    b.Property<long>("RecordsCount")
                        .HasColumnType("bigint")
                        .HasColumnName("records_count");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_ingestion_statuses");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_ingestion_statuses_session_id");

                    b.ToTable("ingestion_statuses", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Lap", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_start");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<int?>("DurationSector1Ms")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sector1_ms");

                    b.Property<int?>("DurationSector2Ms")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sector2_ms");

                    b.Property<int?>("DurationSector3Ms")
                        .HasColumnType("integer")
                        .HasColumnName("duration_sector3_ms");

                    b.Property<int?>("FinishLineSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("finish_line_speed");

                    b.Property<int?>("I1Speed")
                        .HasColumnType("integer")
                        .HasColumnName("i1_speed");

                    b.Property<int?>("I2Speed")
                        .HasColumnType("integer")
                        .HasColumnName("i2_speed");

                    b.Property<bool>("IsPitOutLap")
                        .HasColumnType("boolean")
                        .HasColumnName("is_pit_out_lap");

                    b.Property<int?>("LapDurationMs")
                        .HasColumnType("integer")
                        .HasColumnName("lap_duration_ms");

                    b.Property<int>("LapNumber")
                        .HasColumnType("integer")
                        .HasColumnName("lap_number");

                    b.Property<string>("SegmentsJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("segments_json");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<int?>("StSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("st_speed");

                    b.HasKey("Id")
                        .HasName("pk_laps");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_laps_driver_id");

                    b.HasIndex("SessionId", "DriverId")
                        .HasDatabaseName("ix_laps_session_id_driver_id");

                    b.HasIndex("SessionId", "DriverId", "LapNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_laps_session_id_driver_id_lap_number");

                    b.ToTable("laps", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CircuitKey")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("circuit_key");

                    b.Property<string>("CircuitShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("circuit_short_name");

                    b.Property<int>("CountryKey")
                        .HasMaxLength(3)
                        .HasColumnType("integer")
                        .HasColumnName("country_key");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country_name");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_start");

                    b.Property<int>("Key")
                        .HasMaxLength(10)
                        .HasColumnType("integer")
                        .HasColumnName("key");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("official_name");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_meetings");

                    b.ToTable("meetings", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.PitStop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<int>("LapNumber")
                        .HasColumnType("integer")
                        .HasColumnName("lap_number");

                    b.Property<decimal>("PitDuration")
                        .HasPrecision(5, 3)
                        .HasColumnType("numeric(5,3)")
                        .HasColumnName("pit_duration");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.HasKey("Id")
                        .HasName("pk_pit_stops");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_pit_stops_driver_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_pit_stops_session_id");

                    b.ToTable("pit_stops", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.RaceControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("category");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<int?>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<string>("Flag")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("flag");

                    b.Property<int?>("LapNumber")
                        .HasColumnType("integer")
                        .HasColumnName("lap_number");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.HasKey("Id")
                        .HasName("pk_race_controls");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_race_controls_driver_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_race_controls_session_id");

                    b.ToTable("race_controls", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("GmtOffset")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("gmt_offset");

                    b.Property<int>("Key")
                        .HasMaxLength(20)
                        .HasColumnType("integer")
                        .HasColumnName("key");

                    b.Property<int>("MeetingId")
                        .HasColumnType("integer")
                        .HasColumnName("meeting_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_sessions");

                    b.HasIndex("MeetingId")
                        .HasDatabaseName("ix_sessions_meeting_id");

                    b.ToTable("sessions", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.SessionDriver", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer")
                        .HasColumnName("team_id");

                    b.HasKey("SessionId", "DriverId")
                        .HasName("pk_session_drivers");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_session_drivers_driver_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("ix_session_drivers_team_id");

                    b.ToTable("session_drivers", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Stint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Compound")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("compound");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer")
                        .HasColumnName("driver_id");

                    b.Property<int>("LapEnd")
                        .HasColumnType("integer")
                        .HasColumnName("lap_end");

                    b.Property<int>("LapStart")
                        .HasColumnType("integer")
                        .HasColumnName("lap_start");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer")
                        .HasColumnName("session_id");

                    b.Property<int>("StintNumber")
                        .HasColumnType("integer")
                        .HasColumnName("stint_number");

                    b.Property<int?>("TyreAgeAtStart")
                        .HasColumnType("integer")
                        .HasColumnName("tyre_age_at_start");

                    b.HasKey("Id")
                        .HasName("pk_stints");

                    b.HasIndex("DriverId")
                        .HasDatabaseName("ix_stints_driver_id");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("ix_stints_session_id");

                    b.ToTable("stints", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Key")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("TeamColour")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("team_colour");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id")
                        .HasName("pk_teams");

                    b.ToTable("teams", "domain");
                });

            modelBuilder.Entity("Apex.Domain.Entities.IngestionStatus", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("IngestionStatuses")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ingestion_statuses_sessions_session_id");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Lap", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Driver", "Driver")
                        .WithMany("Laps")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_laps_drivers_driver_id");

                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("Laps")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_laps_sessions_session_id");

                    b.Navigation("Driver");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Apex.Domain.Entities.PitStop", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Driver", "Driver")
                        .WithMany("PitStops")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pit_stops_drivers_driver_id");

                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("PitStops")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_pit_stops_sessions_session_id");

                    b.Navigation("Driver");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Apex.Domain.Entities.RaceControl", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_race_controls_drivers_driver_id");

                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("RaceControls")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_race_controls_sessions_session_id");

                    b.Navigation("Driver");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Session", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Meeting", "Meeting")
                        .WithMany("Sessions")
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sessions_meetings_meeting_id");

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Apex.Domain.Entities.SessionDriver", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Driver", "Driver")
                        .WithMany("SessionDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_drivers_drivers_driver_id");

                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("SessionDrivers")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_session_drivers_sessions_session_id");

                    b.HasOne("Apex.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_session_drivers_teams_team_id");

                    b.Navigation("Driver");

                    b.Navigation("Session");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Stint", b =>
                {
                    b.HasOne("Apex.Domain.Entities.Driver", "Driver")
                        .WithMany("Stints")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stints_drivers_driver_id");

                    b.HasOne("Apex.Domain.Entities.Session", "Session")
                        .WithMany("Stints")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stints_sessions_session_id");

                    b.Navigation("Driver");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Driver", b =>
                {
                    b.Navigation("Laps");

                    b.Navigation("PitStops");

                    b.Navigation("SessionDrivers");

                    b.Navigation("Stints");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Meeting", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Apex.Domain.Entities.Session", b =>
                {
                    b.Navigation("IngestionStatuses");

                    b.Navigation("Laps");

                    b.Navigation("PitStops");

                    b.Navigation("RaceControls");

                    b.Navigation("SessionDrivers");

                    b.Navigation("Stints");
                });
#pragma warning restore 612, 618
        }
    }
}
